//



proc setup() {
    
    
    //====================== General files and tools =====================
    load_file("nrngui.hoc")

    //====================== cvode =======================================
    objref cvode

    cvode = new CVode()
    cvode.active(1)

    //=================== creating cell object ===========================
    load_file("import3d.hoc")
    objref L5PC

    strdef morphology_file
    morphology_file = "morphologies/cell1.asc"

    load_file("models/L5PCbiophys3.hoc")
    load_file("models/L5PCtemplate.hoc")
    L5PC = new L5PCtemplate(morphology_file)

    //=================== settings ================================
    v_init = -80   // orig val: -80
    BACdt = 5

}


proc set_experiment_type () {
    // Type = [BAP | CaBurst | BAC]
    
    experiment_type = $1
    print "Setting up for experiment type", experiment_type
    
    if (0==strcmp(experiment_type,"BAP")) {
        somastimamp = squareAmp
        EPSPamp = 0
    }
    else if (0==strcmp(experiment_type,"CaBurst")) {
        somastimamp = 0
        EPSPamp = Imax*3
    }
    else if (0==strcmp(experiment_type,"BAC")) {
        somastimamp = squareAmp
        EPSPamp = Imax
    }
    else {
        print "WARNING: no experiment type was set"
        print "Assuming = somastimulation"
        
        somastimamp = squareAmp
    }
    

}

proc add_optogenetics () {
    // Params: 
    //      optoexpress     = List of pairs of gene type and where it's expressed
    //                      i.e. ["ChR2", "axon", "ChR2", "basal", "NpHR", "apical_distal"]
    
    optoexpress = $
    // Example: 
    //load_file("NpHR-in-apical_distal.hoc")  
    //print "loaded NpHR apical successful"
    //HR_in_apic(5e-4,10,600,200,350,600)
    for k=0,
}



proc set_stimulus () {
    
    //======================== stimulus settings ============================

    //Somatic pulse
    objref st1
    st1 = new IClamp(0.5)
    st1.amp = somastimamp
    st1.del = tstart
    st1.dur = tstop-tstart-100

    L5PC.soma st1

    //Dendritic EPSP-like current
    objref sl,st2,ns,syn1,con1,isyn, tvec

    isyn = new Vector()
    tvec = new Vector()
    sl = new List()
    double siteVec[2]

    sl = L5PC.locateSites("apic",distalpoint)

    maxdiam = 0
    for(i=0;i<sl.count();i+=1){
        dd1 = sl.o[i].x[1]
        dd = L5PC.apic[sl.o[i].x[0]].diam(dd1)
        if (dd > maxdiam) {
            j = i
            maxdiam = dd 
        }
    }

    siteVec[0] = sl.o[j].x[0]
    siteVec[1] = sl.o[j].x[1]

    access L5PC.apic[siteVec[0]]

    st2 = new IClamp(siteVec[1])
    st2.amp = 0

    L5PC.apic[siteVec[0]] {
        st2
            
        syn1 = new epsp(siteVec[1])
        syn1.tau0 = risetau       
        syn1.tau1 = decaytau   
        syn1.onset = tstart + BACdt  
        syn1.imax = EPSPamp

        cvode.record(&syn1.i,isyn,tvec)
    }
}


proc setup_record() {
    
    //======================== recording settings ============================
    objref vsoma, vdend, recSite, vdend2, isoma

    vsoma = new Vector()
    access L5PC.soma
    cvode.record(&v(0.5),vsoma,tvec)

    vdend = new Vector()
    access L5PC.apic[siteVec[0]]
    cvode.record(&v(siteVec[1]),vdend,tvec)

    sl = new List()
    sl = L5PC.locateSites("apic",proximalpoint)
    maxdiam = 0
    for(i=0;i<sl.count();i+=1){
        dd1 = sl.o[i].x[1]
        dd = L5PC.apic[sl.o[i].x[0]].diam(dd1)
        if (dd > maxdiam) {
            j = i
            maxdiam = dd 
        }
    }

    siteVec[0] = sl.o[j].x[0]
    siteVec[1] = sl.o[j].x[1]

    access L5PC.apic[siteVec[0]]

    recSite = new IClamp(siteVec[1])
    recSite.amp = 0

    L5PC.apic[siteVec[0]] {
        recSite
    }

    access L5PC.apic[siteVec[0]]
    vdend2 = new Vector()
    cvode.record(&v(siteVec[1]),vdend2,tvec)

    access L5PC.soma
    isoma = new Vector()
    cvode.record(&st1.i,isoma,tvec)

    
}




proc setup_plot () {
    
    
    objref gV, gI, s

    gV = new Graph()
    gV.size(tstart-20,tstop,-80,40)
    gV.label(0.5,0.95,"V")

    gI = new Graph()
    gI.size(tstart-20,tstop,-3,6)
    gI.label(0.5,0.95,"I")

    s = new Shape(L5PC.all)
    s.color_list(L5PC.axonal,2,2)
    s.color_list(L5PC.somatic,5)
    s.color_list(L5PC.basal,4)
    s.color_list(L5PC.apical,1)
    s.point_mark(st2,2)
    s.point_mark(recSite,3)
    s.show(0)

}

proc run_plots(){
    
    vsoma.plot(gV,tvec)
    vdend.plot(gV,tvec,2,1)
    vdend2.plot(gV,tvec,3,1)

    isyn.plot(gI,tvec,2,2)
    isoma.plot(gI,tvec,1,2)

}

proc simulate_exp() {
    
    
    init()
    run()
}

    